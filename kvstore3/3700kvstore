#!/usr/bin/python -u

# Austin Colcord and Nick Scheuring

import sys, socket, select, time, json, random, datetime
from message import Message
from Server import Server

my_id = sys.argv[1]

#Todo: set this / 2 + 1 to SERVER.quorum size
replica_ids = sys.argv[2:]

SERVER = Server(my_id, replica_ids)

time.sleep(0.2)
SERVER.get_new_election_timeout()
print "Server Starting..."

while True:
    if SERVER.election_timedout():
        print "SERVER:: election timed out : initiating election..."
        SERVER.initiate_election()

    # new check




    if SERVER.node_state == "L":

        if SERVER.last_applied == SERVER.commit_index:
            print "SERVER :" + SERVER.id + ": Pull from Queue"
            SERVER.pull_from_queue()
            if SERVER.last_applied < len(SERVER.log) - 1:
                SERVER.commit_index = len(SERVER.log) - 1
                print "SERVER :" + SERVER.id + ':send' + str(datetime.datetime.now()) + " LA: " + str(
                    SERVER.last_applied) + " CI: " + str(SERVER.commit_index) + " LOG_SIZE: " + str(len(SERVER.log))
                SERVER.send_append_entries()
                
        # print str(SERVER.id) + ": L"
        if SERVER.heart_beat_timedout():
            if SERVER.last_applied < len(SERVER.log) - 1:
                print "SERVER :LEADER: " + SERVER.id + ": Send Append Entries"
                SERVER.send_append_entries()
            else:
                print "SERVER :LEADER: " + SERVER.id + ": Pull from Queue"
                SERVER.pull_from_queue()
                if SERVER.last_applied < len(SERVER.log) - 1:
                    print "SERVER :LEADER: " + SERVER.id + ": Send Append Entries"
                    SERVER.send_append_entries()
                else:
                    print "SERVER :LEADER: " + SERVER.id + ": Send Heartbeat"
                    SERVER.send_heartbeat()
    # if SERVER.node_state == "F":
    #     print str(SERVER.id) + ": F"
    # if SERVER.node_state == "C":
    #     print str(SERVER.id) + ": C"

    ready = select.select([SERVER.sock], [], [], 0.01)[0]

    if SERVER.sock in ready:
        msg_raw = SERVER.sock.recv(32768)

        if len(msg_raw) == 0:
           continue

        msg = json.loads(msg_raw)

        if SERVER.node_state == "L":
            SERVER.leader_receive_message(msg)

        if SERVER.node_state == "C":
            SERVER.candidate_receive_message(msg)

        if SERVER.node_state == "F":
            SERVER.follower_receive_message(msg)

        # Handle noop messages. This may be removed from your final implementation
        elif msg['type'] == 'noop':
            print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

