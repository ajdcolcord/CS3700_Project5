#!/usr/bin/env python

import sys, socket, select, time, json, random
from message import Message

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0

KEY_VALUE_STORE = {}
# Node state: Follower, Candidate, Leader
NODE_STATE = "F"
LEADER_ADDRESS = 0


def action(message):
    global KEY_VALUE_STORE

    if message.type == 'get':
        get(message)
    elif message.type == 'put':
        put(message)


def get(message):
    global KEY_VALUE_STORE

    print "Get"
    if message.key not in KEY_VALUE_STORE:
        send(message.create_fail_message())

    else:
        send(message.create_ok_get_message(KEY_VALUE_STORE[message.key]))


def put(message):
    global KEY_VALUE_STORE

    print "Put"

    put_into_store(message.key, message.value)
    print "Added " + str(message.key) + " with value " + str(message.value)

    #assuming successful
    send(message.create_ok_put_message())

def put_into_store(key, value):
    global KEY_VALUE_STORE

    KEY_VALUE_STORE[key] = value


def send(json_message):
    print "sending"

    try:
        sock.send(json.dumps(json_message))
    except:
        raise Exception("Could not successfully send message")


while True:
    ready = select.select([sock], [], [], 0.1)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) == 0:
            continue

        msg = json.loads(msg_raw)

        # For now, ignore get() and put() from clients
        if msg['type'] in ['get', 'put']:
            message = Message.create_message_from_json(msg)

            action(message)

        # Handle noop messages. This may be removed from your final implementation
        elif msg['type'] == 'noop':
            print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

    '''
    clock = time.time()
    if clock-last > 2:
        # Send a no-op message to a random peer every two seconds, just for fun
        # You definitely want to remove this from your implementation
        msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
        sock.send(json.dumps(msg))
        print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
        last = clock
    '''



